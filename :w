
use rocket::{get, http::Status, serde::json::Json};
use serde::Serialize;

#[macro_use]
extern crate rocket;

#[derive(Serialize)]
pub struct GenericResponse {
    pub status: String,
    pub message: String,
}

const DNA_CHARSET: &[u8] = b"ATGC";
const RNA_CHARSET: &[u8] = b"AUGC";
fn generate(CHARSET: &[u8], len: i16) -> RandomBio {
    let mut rng = rand::thread_rng();
    let one_char = || CHARSET[rng.gen_range(0..CHARSET.len())] as char;
    RandomBio {
    data: iter::repeat_with(one_char).take(len as usize).collect(),
    }
}

#[get("/projects/randombio?<typeTemp>&<length>")]
pub async fn health_checker_handler(typeTemp: i8, length: i16) -> Result<Json<GenericResponse>, Status> {
    const MESSAGE: &str = "Build Simple CRUD API with Rust and Rocket";
    let data = match typeTemp {
        1 => Ok(generate(DNA_CHARSET, length)),
        2 => Ok(generate(RNA_CHARSET, length)),
        3 => Ok(generate(DNA_CHARSET, length)),
        _ => Err("".to_string()),
    };

    match data {
        Ok => Ok(Json(GenericResponse {
        status: "success".to_string(),
        message: "data".to_string(),
    })),
        Err => Ok(Json(GenericResponse {
            status: "failure".to_string(),
            message: "Somehing is wrong".to_string()
        }))
    }
}

#[launch]
fn rocket() -> _ {
    rocket::build().mount("/", routes![health_checker_handler,])
}
